#!/bin/sh
# -*- sh -*-
# vim: set syntax=sh
# code: language=shellscript

# Copyright (c) 2022 Michael Federczuk
# SPDX-License-Identifier: MPL-2.0 AND Apache-2.0

set -o errexit
set -o nounset

# enabling POSIX-compliant behavior for GNU programs
export POSIXLY_CORRECT=yes POSIX_ME_HARDER=yes


if [ $# -gt 0 ]; then
	if [ "${0#/}" = "$0" ]; then
		argv0="$0"
	else
		argv0="$(basename -- "$0" && printf x)"
		argv0="${argv0%"$(printf '\nx')"}"
	fi

	printf '%s: too many arguments: %i\n' "$argv0" $# >&2
	exit 4
fi


debug_type() {
	printf 'debug'
	exit 0
}

release_type() {
	printf 'release'
	exit 0
}


if ! command -v git > '/dev/null' || ! git --no-pager status > '/dev/null' 2> '/dev/null'; then
	# command `git` not available or the current working directory is not a git repository
	release_type
fi


git_branch="$(git --no-pager rev-parse --abbrev-ref HEAD)"
readonly git_branch

newline_count="$(printf '%s' "$git_branch" | wc -l)"
readonly newline_count

integer_pattern='([0-9]*)'
readonly integer_pattern

version_pattern="^v($integer_pattern)\.($integer_pattern)\.($integer_pattern)(-(indev|rc)$integer_pattern)?$"
readonly version_pattern

if [ "$newline_count" = '0' ] && printf '%s' "$git_branch" | grep -Eq "^(HEAD|staging/($version_pattern)|master)$"; then
	# either HEAD is in detached state or the checked-out branch is either a staging-type branch or master
	release_type
fi


debug_type
